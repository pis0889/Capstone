name: Flask CI/CD Pipeline

# GitHub Actions가 트리거될 이벤트 설정 (푸시가 발생했을 때)
on:
  push:
    branches:
      - back  # main 브랜치에 푸시될 때마다 실행

# jobs 섹션에서 다양한 작업을 정의합니다.
jobs:
  build:
    runs-on: ubuntu-latest  # Ubuntu 최신 버전에서 실행

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Python 설정
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'  # 원하는 Python 버전 설정

      # 3. 의존성 설치 (requirements.txt 필요)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flask_app/backend/requirements.txt

      # 4. 테스트 (테스트가 있다면 실행)
      - name: Run tests
        run: |
          pytest  # 또는 사용 중인 테스트 명령어


      - name: Install aws-cfn-bootstrap
        run: |
          wget https://github.com/aws/aws-cfn-bootstrap/releases/download/v1.4.0/aws-cfn-bootstrap-1.4.0.tar.gz
          tar -xzvf aws-cfn-bootstrap-1.4.0.tar.gz
          cd aws-cfn-bootstrap-1.4.0
          python setup.py install

      # 5. EC2 서버에 배포
      - name: Deploy to EC2
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # EC2 프라이빗 키 (GitHub Secrets에 저장)
          EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 호스트 (IP 또는 DNS)
          EC2_USER: ${{ secrets.EC2_USER }}  # EC2 사용자 (보통 ec2-user)
        run: |
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=yes -r ./* $EC2_USER@$EC2_HOST:/home/ec2-user/flask_app/backend
          ssh -i private_key.pem -o StrictHostKeyChecking=yes $EC2_USER@$EC2_HOST << EOF
            cd /home/ec2-user/flask_app/backend
            pip install -r requirements.txt
            sudo systemctl restart gunicorn  # 서비스 이름에 맞게 수정
          EOF
